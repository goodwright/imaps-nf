/*
========================================================================================
    goodwright/imaps-nf Nextflow config file
========================================================================================
    Config for preparegenome.nf
----------------------------------------------------------------------------------------
*/

includeConfig '../conf/base.config'

manifest {
    name            = 'goodwright/imapsnf'
    author          = 'Charlotte Capitanchik, Sam Ireland, Alex Harston'
    homePage        = 'https://github.com/goodwright/imaps-nf'
    description     = 'Nextflow CLIP-Seq analysis pipeline, as used in imaps.goodwright.org'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '3.3'
}

params {
    outdir                 = './results'
    publish_dir_mode       = 'copy'
}

profiles {
    test      { includeConfig 'conf/test.config'      }
    docker    {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    iMaps {
      docker.enabled         = true
      docker.userEmulation   = true
      singularity.enabled    = false
      podman.enabled         = false
      shifter.enabled        = false
      charliecloud.enabled   = false

      params {
        max_cpus   = 2
        max_memory = 6.GB
        max_time   = 6.h
      }
    }
}



///////////////
// Functions //
///////////////

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}